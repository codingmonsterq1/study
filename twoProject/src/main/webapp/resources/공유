





1일차 : 
 게시판 생성, 리스트 구현.

 
 1. 프로젝트의 자바 버전, 스프링 버전, 기타 등등 라이브러리 버전 관리를 pom.xml에서 설정하는 것을 이해 한다. 
 	(프로젝트 우클릭->properties 에서 인코딩 설정 utf-8로 되있나 확인->project facets -> 자바 버전 최신으로 관리.(1.8))
 
 
 2. webapp ->web.xml에 어떤 설정이 되어 있나 확인하고 기능을 이해한다. ->  WEB-INF->spring 폴더 -> 
 	servlet-context.xml이 어떤 기능을 하는지 이해한다.
 	root-context.xml이 어떤 기능을 하는지 이해한다 (다른 설정을 하지 않았을 경우 이 루트-컨텍스트.xml에서 모든 설정 및 관리가 이루어 짐.)
 	
 	
 3. context:component-scan 이라는 빈태그의 역할을 이해한다. 
 (어노테이션으로 의존성 주입했을때 이 컴포넌트-스켄으로 패키지 경로를 잡아줘야 에러가 발생하지 않음)
 
 4, 대충 스프링 기초적인 설정이 완료되었으면, 코드를 작성한다.
 	이때, 순서는 
 	1번 방식 : 
 	view-> controller -> service -> dao -> mybatis -> dto -> db 로 흘러도 상관 없고
 	2번 방식 : 
 	db-> dto- > mybatis -> dao -> service -> controller -> view 로 흘러도 상관 없다.
 	
 	
 	# 구체적 방법론: (2번 방식)
 	db에서 먼저 사용할 테이블과 컬럼들을 설정
 	(board를 만든다면 no(number), id(varchar2), title(varchar2), contents(varchar2), reg_date(date)정도만 만듬) ->
 	 dto 클레스를 만들어서 db에 만들어둔 컬럼들을 데이터타입과 변수명을 모두 일치시켜 private로 변수 지정후 getter setter 캡슐화->
 	  dao클레스  -> mybatis에서 sql문(본 예제는 mapper 하위 폴더에 boardMapper.xml로 지정해 둠 . 같은 법칙을 따라도 무방) ->
 	   dao에 삽입 -> service클레스에서 구현(서비스 클레스는 구체적인 구현체이다.) -> controller에서 service 클레스 호출 -> 
 	   view page 제작
 	
 	이런 형태로 가도 상관 없다. 어디까지나 코딩 스타일의 차이인 것이다. 하지만 순서를 지켜서 할 것.
 	
 	
 	dto : private로 데이터 변경을 무조건 get이나 set을 이용해서만 가능하도록 캡슐화 시킬것. 퍼블릭하게 변수명을 지정하면 안됨
 	mapper: sql문 쓰는 장소
 	dao : sql문을 잇는 중간다리 정도의 역할
 	service : 구체적 구현체
 	controller : 서버단과 클라이언트단을 통제하는 컨트롤타워 역할
 	